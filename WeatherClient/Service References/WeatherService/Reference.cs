//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherClient.WeatherService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherData", Namespace="http://schemas.datacontract.org/2004/07/LessonCode")]
    [System.SerializableAttribute()]
    public partial class WeatherData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SunnyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WindSpeedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Sunny {
            get {
                return this.SunnyField;
            }
            set {
                if ((this.SunnyField.Equals(value) != true)) {
                    this.SunnyField = value;
                    this.RaisePropertyChanged("Sunny");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WindSpeed {
            get {
                return this.WindSpeedField;
            }
            set {
                if ((this.WindSpeedField.Equals(value) != true)) {
                    this.WindSpeedField = value;
                    this.RaisePropertyChanged("WindSpeed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWeatherService")]
    public interface IWeatherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWeatherToday", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherTodayResponse")]
        string GetWeatherToday();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWeatherToday", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherTodayResponse")]
        System.Threading.Tasks.Task<string> GetWeatherTodayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWeatherTomorrow", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherTomorrowResponse")]
        WeatherClient.WeatherService.WeatherData GetWeatherTomorrow();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWeatherTomorrow", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherTomorrowResponse")]
        System.Threading.Tasks.Task<WeatherClient.WeatherService.WeatherData> GetWeatherTomorrowAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWeatherForDate", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherForDateResponse")]
        WeatherClient.WeatherService.WeatherData GetWeatherForDate(System.DateTime time);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWeatherForDate", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherForDateResponse")]
        System.Threading.Tasks.Task<WeatherClient.WeatherService.WeatherData> GetWeatherForDateAsync(System.DateTime time);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherServiceChannel : WeatherClient.WeatherService.IWeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<WeatherClient.WeatherService.IWeatherService>, WeatherClient.WeatherService.IWeatherService {
        
        public WeatherServiceClient() {
        }
        
        public WeatherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetWeatherToday() {
            return base.Channel.GetWeatherToday();
        }
        
        public System.Threading.Tasks.Task<string> GetWeatherTodayAsync() {
            return base.Channel.GetWeatherTodayAsync();
        }
        
        public WeatherClient.WeatherService.WeatherData GetWeatherTomorrow() {
            return base.Channel.GetWeatherTomorrow();
        }
        
        public System.Threading.Tasks.Task<WeatherClient.WeatherService.WeatherData> GetWeatherTomorrowAsync() {
            return base.Channel.GetWeatherTomorrowAsync();
        }
        
        public WeatherClient.WeatherService.WeatherData GetWeatherForDate(System.DateTime time) {
            return base.Channel.GetWeatherForDate(time);
        }
        
        public System.Threading.Tasks.Task<WeatherClient.WeatherService.WeatherData> GetWeatherForDateAsync(System.DateTime time) {
            return base.Channel.GetWeatherForDateAsync(time);
        }
    }
}
